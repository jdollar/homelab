---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: minio
  namespace: kube-system
spec:
  chart: minio
  repo: https://raw.githubusercontent.com/minio/minio/master
  version: 5.0.14
  targetNamespace: kube-system
  valuesContent: |-
    mode: "standalone"

    resources:
      limits:
        memory: 1.5Gi
      requests:
        memory: 1.5Gi

    ## Internal port number for MinIO S3 API container
    ## Change service.port to change external port number
    minioAPIPort: "9000"

    ## Internal port number for MinIO Browser Console container
    ## Change consoleService.port to change external port number
    minioConsolePort: "9001"

    ## Use existing Secret that store following variables:
    ##
    ## | Chart var             | .data.<key> in Secret    |
    ## |:----------------------|:-------------------------|
    ## | rootUser              | rootUser                 |
    ## | rootPassword          | rootPassword             |
    ##
    ## All mentioned variables will be ignored in values file.
    ## .data.rootUser and .data.rootPassword are mandatory,
    ## others depend on enabled status of corresponding sections.
    existingSecret: "minio-secret"

    # Number of drives attached to a node
    drivesPerNode: 1
    # Number of MinIO containers running
    replicas: 2
    # Number of expanded MinIO clusters
    pools: 1

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      annotations: {}

      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      existingClaim: ""

      ## minio data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      ## Storage class of PV to bind. By default it looks for standard storage class.
      ## If the PV uses a different storage class, specify that here.
      storageClass: "nfs-csi"
      volumeName: ""
      accessMode: ReadWriteOnce
      size: 500Gi

      ## If subPath is set mount a sub folder of a volume instead of the root of the volume.
      ## This is especially handy for volume plugins that don't natively support sub mounting (like glusterfs).
      ##
      subPath: ""

    ## Expose the MinIO service to be accessed from outside the cluster (LoadBalancer service).
    ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
    ## ref: http://kubernetes.io/docs/user-guide/services/
    ##
    service:
      type: ClusterIP
      clusterIP: ~
      port: "9000"
      nodePort: 32000

    ## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##

    ingress:
      enabled: false
      # ingressClassName: ""
      labels: {}
        # node-role.kubernetes.io/ingress: platform

      annotations:
        kubernetes.io/ingress.class: "traefik"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
      path: /
      hosts:
        - minio-data.joeldollarhide.com
      tls:
        - secretName: minio-data-tls
          hosts:
            - minio-data.joeldollarhide.com

    consoleService:
      type: ClusterIP
      clusterIP: ~
      port: "9001"
      nodePort: 32001

    consoleIngress:
      enabled: true
      # ingressClassName: ""
      labels: {}
        # node-role.kubernetes.io/ingress: platform

      annotations:
        kubernetes.io/ingress.class: "traefik"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
        traefik.ingress.kubernetes.io/preserve-host: "true"
      path: /
      hosts:
        - minio.joeldollarhide.com
      tls:
        - secretName: minio-console-tls
          hosts:
            - minio.joeldollarhide.com

    ## List of policies to be created after minio install
    ##
    ## In addition to default policies [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
    ## you can define additional policies with custom supported actions and resources
    policies: []
    ## writeexamplepolicy policy grants creation or deletion of buckets with name
    ## starting with example. In addition, grants objects write permissions on buckets starting with
    ## example.
    # - name: writeexamplepolicy
    #   statements:
    #     - resources:
    #         - 'arn:aws:s3:::example*/*'
    #       actions:
    #         - "s3:AbortMultipartUpload"
    #         - "s3:GetObject"
    #         - "s3:DeleteObject"
    #         - "s3:PutObject"
    #         - "s3:ListMultipartUploadParts"
    #     - resources:
    #         - 'arn:aws:s3:::example*'
    #       actions:
    #         - "s3:CreateBucket"
    #         - "s3:DeleteBucket"
    #         - "s3:GetBucketLocation"
    #         - "s3:ListBucket"
    #         - "s3:ListBucketMultipartUploads"
    ## readonlyexamplepolicy policy grants access to buckets with name starting with example.
    ## In addition, grants objects read permissions on buckets starting with example.
    # - name: readonlyexamplepolicy
    #   statements:
    #     - resources:
    #         - 'arn:aws:s3:::example*/*'
    #       actions:
    #         - "s3:GetObject"
    #     - resources:
    #         - 'arn:aws:s3:::example*'
    #       actions:
    #         - "s3:GetBucketLocation"
    #         - "s3:ListBucket"
    #         - "s3:ListBucketMultipartUploads"
    ## conditionsexample policy creates all access to example bucket with aws:username="johndoe" and source ip range 10.0.0.0/8 and 192.168.0.0/24 only
    # - name: conditionsexample
    #   statements:
    #     - resources:
    #       - 'arn:aws:s3:::example/*'
    #       actions:
    #       - 's3:*'
    #       conditions:
    #         - StringEquals: '"aws:username": "johndoe"'
    #         - IpAddress: |
    #             "aws:SourceIp": [
    #               "10.0.0.0/8",
    #               "192.168.0.0/24"
    #             ]
    #
    ## Additional Annotations for the Kubernetes Job makePolicyJob
    makePolicyJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
      # Command to run after the main command on exit
      exitCommand: ""

    ## List of users to be created after minio install
    ##
    users:
      - accessKey: console
        secretKey: console123
        policy: consoleAdmin
      - accessKey: loki
        secretKey: loki-minio-user
        policy: readwrite

    ## Additional Annotations for the Kubernetes Job makeUserJob
    makeUserJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
      # Command to run after the main command on exit
      exitCommand: ""

    ## List of service accounts to be created after minio install
    ##
    #
    svcaccts:
      - accessKey: loki-svcacct
        secretKey: loki-minio-user
        user: loki
      ## accessKey, secretKey and parent user to be assigned to the service accounts
      ## Add new service accounts as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/minio-user-management.html#service-accounts
      # - accessKey: console-svcacct
      #   secretKey: console123
      #   user: console
      ## Or you can refer to specific secret
      # - accessKey: externalSecret
      #   existingSecret: my-secret
      #   existingSecretKey: password
      #   user: console
      ## You also can pass custom policy
      # - accessKey: console-svcacct
      #   secretKey: console123
      #   user: console
      #   policy:
      #     statements:
      #       - resources:
      #           - 'arn:aws:s3:::example*/*'
      #         actions:
      #           - "s3:AbortMultipartUpload"
      #           - "s3:GetObject"
      #           - "s3:DeleteObject"
      #           - "s3:PutObject"
      #           - "s3:ListMultipartUploadParts"

    makeServiceAccountJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
      # Command to run after the main command on exit
      exitCommand: ""

    ## List of buckets to be created after minio install
    ##
    buckets:
        # Name of the bucket
      - name: velero-backup
        # Policy to be set on the
        # bucket [none|download|upload|public]
        policy: public
        # Purge if bucket exists already
        purge: false
        # set versioning for
        # bucket [true|false]
        versioning: false
        # set objectlocking for
        # bucket [true|false] NOTE: versioning is enabled by default if you use locking
        objectlocking: false
      - name: longhorn-backup
        # Policy to be set on the
        # bucket [none|download|upload|public]
        policy: public
        # Purge if bucket exists already
        purge: false
        # set versioning for
        # bucket [true|false]
        versioning: false
        # set objectlocking for
        # bucket [true|false] NOTE: versioning is enabled by default if you use locking
        objectlocking: false
      - name: chunks
        policy: public
        purge: false
        versioning: false
        objectlocking: false
      - name: ruler
        policy: public
        purge: false
        versioning: false
        objectlocking: false
      - name: admin
        policy: public
        purge: false
        versioning: false
        objectlocking: false

    ## Additional Annotations for the Kubernetes Job makeBucketJob
    makeBucketJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
      # Command to run after the main command on exit
      exitCommand: ""

    ## List of command to run after minio install
    ## NOTE: the mc command TARGET is always "myminio"
    customCommands:
      # - command: "admin policy attach myminio consoleAdmin --group='cn=ops,cn=groups,dc=example,dc=com'"

    ## Additional Annotations for the Kubernetes Job customCommandJob
    customCommandJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
      # Command to run after the main command on exit
      exitCommand: ""

    ## Merge jobs
    postJob:
      podAnnotations: {}
      annotations: {}
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      nodeSelector: {}
      tolerations: []
      affinity: {}

    ## Use this field to add environment variables relevant to MinIO server. These fields will be passed on to MinIO container(s)
    ## when Chart is deployed
    environment:
      ## Please refer for comprehensive list https://min.io/docs/minio/linux/reference/minio-server/minio-server.html
      ## MINIO_SUBNET_LICENSE: "License key obtained from https://subnet.min.io"
      ## MINIO_BROWSER: "off"

    ## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
    ## and 'name' is left unspecified, the account 'default' will be used.
    serviceAccount:
      create: true
      ## The name of the service account to use. If 'create' is 'true', a service account with that name
      ## will be created.
      name: "minio-sa"

    deploymentUpdate:
      type: Recreate
