hull:
  config:
    specific:
      httpPort: 8080
      httpsPort: 8081
      https2Port: 8181
      ingressHost: calibre.joeldollarhide.com

  objects:
    configmap:
      app:
        data:
          TZ:
            inline: "America/New_York"
          UMASK:
            inline: "002"
          PUID:
            inline: "1000"
          PGID:
            inline: "1000"
          DOCKER_MODS:
            inline: "linuxserver/mods:universal-calibre"
          OAUTHLIB_RELAX_TOKEN_SCOPE:
            inline: "1"

    deployment:
      app:
        replicas: 1
        strategy:
          type: Recreate
        templateLabels:
          app.kubernetes.io/type: app
        pod:
          volumes:
            jellyfin-pvc-media:
              active: persistentVolumeClaim
              persistentVolumeClaim:
                staticName: true
                claimName: jellyfin-pvc-media
            calibre-web-pvc-config-longhorn:
              active: persistentVolumeClaim
              persistentVolumeClaim:
                staticName: true
                claimName: calibre-web-pvc-config-longhorn
          containers:
            app:
              image:
                repository: linuxserver/calibre
                pullPolicy: IfNotPresent
                tag: _HT**Chart.appVersion
              ports:
                http:
                  containerPort: _HT*hull.config.specific.httpPort
                  protocol: TCP
                https:
                  containerPort: _HT*hull.config.specific.httpsPort
                  protocol: TCP
                https2:
                  containerPort: _HT*hull.config.specific.https2Port
                  protocol: TCP
              volumeMounts:
                calibre-web-pvc-config-longhorn:
                  name: calibre-web-pvc-config-longhorn
                  mountPath: /config
                jellyfin-pvc-media:
                  name: jellyfin-pvc-media
                  mountPath: /data
              envFrom:
                app:
                  configMapRef:
                    name: app
                    optional: false

    service:
      app:
        type: ClusterIP
        ports:
          http:
            port: _HT*hull.config.specific.httpPort
            targetPort: http
            protocol: TCP
          https:
            port: _HT*hull.config.specific.httpsPort
            targetPort: http
            protocol: TCP
          https2:
            port: _HT*hull.config.specific.https2Port
            targetPort: http
            protocol: TCP

    ingress:
      app:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "traefik"
          cert-manager.io/cluster-issuer: letsencrypt-prod
          traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd

          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "Calibre"
          gethomepage.dev/description: "Print book library"
          gethomepage.dev/group: "Books"
          gethomepage.dev/icon: "calibre"
          gethomepage.dev/weight: "2"
        rules:
          app:
            host: _HT*hull.config.specific.ingressHost
            http:
              paths:
                root:
                  path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: app
                      port:
                        name: http
        tls:
          app:
            enabled: true
            secretName: tls
            hosts:
              - _HT!
                [
                {{ (index . "$").Values.hull.config.specific.ingressHost }}
                ]

    customresource:
      app:
        apiVersion: traefik.io/v1alpha1
        kind: IngressRouteTCP
        spec:
          entryPoints:
            - calibretcp
          routes:
            - match: HostSNI(`*`)
              services:
                - name: _HT^app
                  port: _HT*hull.config.specific.httpsPort

    persistentvolumeclaim:
      calibre-web-pvc-config-longhorn:
        staticName: true
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 1Gi

